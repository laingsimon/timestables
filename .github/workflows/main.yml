name: Deploy

on:
  workflow_dispatch:
    inputs:
      purge_cache:
        description: 'Should the CDN cache be purged?'
        require: true
        type: boolean
        default: false
  push:
    branches:
      - main
  pull_request:
    types: [opened,reopened,synchronize]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve commit and branch variables
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "commit_date=$(git show --no-patch --no-notes --pretty='%cd' "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "branch_name=$(echo "$GITHUB_REF_NAME" | sed -r 's/\//_/g')" >> $GITHUB_ENV

      - name: Resolve deployment variables
        shell: bash
        if: ${{ env.branch_name == 'main' }}
        run: |
          echo "deploy_dir=\$web/${{ env.branch_name }}.${{ env.sha_short }}" >> $GITHUB_ENV
          echo "deploy_dir_relative=${{ env.branch_name }}.${{ env.sha_short }}" >> $GITHUB_ENV
          echo "purge_dir=/${{ env.branch_name }}.${{ env.sha_short }}/*" >> $GITHUB_ENV

      - name: Resolve deployment variables
        shell: bash
        if: ${{ env.branch_name != 'main' }}
        run: |
          echo "deploy_dir=\$web/${{ env.branch_name }}" >> $GITHUB_ENV
          echo "deploy_dir_relative=${{ env.branch_name }}" >> $GITHUB_ENV
          echo "purge_dir=/${{ env.branch_name }}/*" >> $GITHUB_ENV

      - name: Supplant variables
        shell: bash
        run: |
          sed -i 's/{commitId}/${{ env.sha_short }}/g' index.html
          sed -i 's/{commitTime}/${{ env.commit_date }}/g' index.html
          sed -i 's/{branchName}/${{ env.branch_name }}/g' index.html
          sed -i 's/{deployDir}/${{ env.deploy_dir_relative }}/g' ./static_blobs/index.html

      - name: Setup azure cli (install extensions without a prompt)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt

      - name: Delete current deployment directory
        uses: azure/CLI@v1
        if: ${{ env.branch_name != 'main' }}
        with:
          inlineScript: |
            az storage blob directory delete --account-name "timestablesapp" --auth-mode key -d $deploy_dir_relative -c '$web' --recursive

      - name: Create deployment directory
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob directory create --account-name "timestablesapp" --auth-mode key -d $deploy_dir_relative -c '$web'

      - name: Upload js
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $deploy_dir -s . --pattern "*.js"
      - name: Upload css
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $deploy_dir -s . --pattern "*.css"
      - name: Upload html
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $deploy_dir -s . --pattern "*.html"

      - name: Upload redirect html to blob storage
        uses: azure/CLI@v1
        if: ${{ env.branch_name == 'main' }}
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d '$web' -s './static_blobs' --pattern "*.html"

      - name: Purge deployment CDN cache
        uses: azure/CLI@v1
        if: ${{ github.event.inputs.purge_cache == 'true' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths $purge_dir --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"

      - name: Purge redirect CDN cache
        uses: azure/CLI@v1
        if: ${{ env.branch_name == 'main' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths "/index.html" --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"

      - name: logout
        run: |
          az logout
        if: always()

