name: Pull request

on:
  workflow_dispatch:
    inputs:
      purge_cache:
        description: 'Should the CDN cache be purged?'
        require: true
        type: boolean
        default: false
  push:
    branches:
      - main
  pull_request:
    types: [opened,reopened,synchronize]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve commit and branch variables
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "commit_date=$(git show --no-patch --no-notes --date=format:'%d-%b %Y %H:%M' --pretty='%cd' "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "branch_name=$(echo "$GITHUB_REF_NAME" | sed -r 's/\//_/g')" >> $GITHUB_ENV
          echo "temp_version_path=$RUNNER_TEMP/versions" >> $GITHUB_ENV

## variables (main | other-branches)
# deploy_dir_name                     ''              | 30_merge
# deploy_dir                          $web            | $web/30_merge
# app_deploy_dir                      $web/main.xxxx  | $web/30_merge/app
# deploy_dir_relative_regex_safe      ''              | \/30_merge
# app_deploy_dir_relative_regex_safe  main.xxxx       | 30_merge\/app
# purge_dir                           /main.xxxx/*    | /30_merge/*
# versions_path                       versions        | 30_merge/versions
# version                             main.xxxx       | 30_merge

      - name: Resolve deployment paths (main)
        shell: bash
        if: ${{ env.branch_name == 'main' }}
        run: |
          echo "deploy_dir=\$web" >> $GITHUB_ENV
          echo "app_deploy_dir=\$web/${{ env.branch_name }}.${{ env.sha_short }}" >> $GITHUB_ENV
          echo "deploy_dir_relative_regex_safe=" >> $GITHUB_ENV
          echo "deploy_dir_name=" >> $GITHUB_ENV
          echo "app_deploy_dir_relative_regex_safe=${{ env.branch_name }}.${{ env.sha_short }}" >> $GITHUB_ENV
          echo "purge_dir=/${{ env.branch_name }}.${{ env.sha_short }}/*" >> $GITHUB_ENV
          echo "versions_path=versions" >> $GITHUB_ENV
          echo "version=${{ env.branch_name }}.${{ env.sha_short }}" >> $GITHUB_ENV
      - name: Resolve deployment paths (Prs)
        shell: bash
        if: ${{ env.branch_name != 'main' }}
        run: |
          echo "deploy_dir=\$web/${{ env.branch_name }}" >> $GITHUB_ENV
          echo "app_deploy_dir=\$web/${{ env.branch_name }}/app" >> $GITHUB_ENV
          echo "deploy_dir_name=${{ env.branch_name }}" >> $GITHUB_ENV
          echo "deploy_dir_relative_regex_safe=\/${{ env.branch_name }}" >> $GITHUB_ENV
          echo "app_deploy_dir_relative_regex_safe=${{ env.branch_name }}\/app" >> $GITHUB_ENV
          echo "purge_dir=/${{ env.deploy_dir_name }}/*" >> $GITHUB_ENV
          echo "versions_path=${{ env.deploy_dir_name }}/versions" >> $GITHUB_ENV
          echo "version=${{ env.branch_name }}" >> $GITHUB_ENV

      - name: Supplant variables
        shell: bash
        run: |
          sed -i 's/{commitId}/${{ env.sha_short }}/g' index.html
          sed -i 's/{commitTime}/${{ env.commit_date }}/g' index.html
          sed -i 's/{branchName}/${{ env.branch_name }}/g' index.html
          sed -i 's/{appDeployDir}/${{ env.app_deploy_dir_relative_regex_safe }}/g' ./static_blobs/index.html
          sed -i 's/{appDeployDir}/${{ env.app_deploy_dir_relative_regex_safe }}/g' ./static_blobs/error.html
          sed -i 's/{appDeployDir}/${{ env.app_deploy_dir_relative_regex_safe }}/g' index.html
          sed -i 's/{appDeployDir}/${{ env.app_deploy_dir_relative_regex_safe }}/g' manifest.json
          sed -i 's/{deployDir}/${{ env.deploy_dir_relative_regex_safe }}/g' ./static_blobs/index.html
          sed -i 's/{deployDir}/${{ env.deploy_dir_relative_regex_safe }}/g' ./static_blobs/error.html
          sed -i 's/{deployDir}/${{ env.deploy_dir_relative_regex_safe }}/g' index.html
          sed -i 's/{deployDir}/${{ env.deploy_dir_relative_regex_safe }}/g' manifest.json

      - name: Setup azure cli (install extensions without a prompt)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt

      - name: Delete current deployment directory
        uses: azure/CLI@v1
        if: ${{ env.branch_name != 'main' }}
        with:
          inlineScript: |
            az storage blob directory delete --account-name "timestablesapp" --auth-mode key -d $deploy_dir_name -c '$web' --recursive

      - name: Download versions
# don't use the azure/CLI version here, it runs in a container which is cleared up after each step meaning the files can be accessed in the second step
        continue-on-error: true # the file may not exist, if it doesn't then the deployment can continue, a file with this version number alone will be created
        run: |
          az storage blob download --account-name "timestablesapp" --auth-mode key -c '$web' --file ${{ env.temp_version_path }} --name ${{ env.versions_path }}
      - name: Upload versions
# don't use azure/CLI here, it runs in a container so can't access the files from the first step
        run: |
          echo '${{ env.version }}' >> ${{ env.temp_version_path }}
          cat ${{ env.temp_version_path }}
          az storage blob upload --account-name "timestablesapp" --auth-mode key -c '$web' --file ${{ env.temp_version_path }} --name ${{ env.versions_path }} --overwrite


      - name: Upload js
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $app_deploy_dir -s . --pattern "*.js*"
      - name: Upload css
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $app_deploy_dir -s . --pattern "*.css"
      - name: Upload html
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $app_deploy_dir -s . --pattern "*.html"

      - name: Upload static content
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name "timestablesapp" --auth-mode key -d $deploy_dir -s './static_blobs' --overwrite

      - name: Purge deployment CDN cache
        uses: azure/CLI@v1
        if: ${{ github.event.inputs.purge_cache == 'true' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths $purge_dir --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"
      - name: Purge redirect CDN cache
        uses: azure/CLI@v1
        if: ${{ env.branch_name == 'main' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths "/index.html" --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"
      - name: Purge error file cache
        uses: azure/CLI@v1
        if: ${{ env.branch_name == 'main' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths "/error.html" --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"
      - name: Purge manifest CDN cache
        uses: azure/CLI@v1
        if: ${{ env.branch_name == 'main' }}
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths "/service-worker.js" --profile-name "TimestablesappCDN" --name "timestablesapp" --resource-group "Default-Storage-WestEurope"

      - name: logout
        run: |
          az logout
        if: always()

  add_comment:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Resolve branch name
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
          echo "branch_name=$(echo "$GITHUB_REF_NAME" | sed -r 's/\//_/g')" >> $GITHUB_ENV

      - name: Add comment to PR with testing link
        if: ${{ env.branch_name != 'main' && github.event.action != 'synchronize' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'The changes have been deployed to [/${{ env.branch_name }}](https://app.timestables.xyz/${{ env.branch_name }}/)'
            })
